# Geocoding script for large list of addresses.
# This is the script developed by Shane Lynn 10/10/2013 with some extra comments added in 

#load up the ggmap library
library(ggmap)

#############################Gets the input data#############################################################################
# get the input data
infile <- 'accreditedmus5'
data <- read.csv(paste0('filepath Culture project\\', infile, '.csv'), header=T)

# get the address list, and append "Ireland" to the end to increase accuracy 
# (change or remove this if your address already include a country etc.)
 #Creates the variable that is going to be looped through
addresses= paste(data$name,data$Region, sep=" ,")
addresses= paste(addresses,data$Country, sep=" ,")
#Adds in the regional data
addresses = paste0(addresses,", UK") #The paste0 means that there is no gap between the two things that are being pasted together

#######################The geocoding function getGeoDetails##################################################################
#############################################################################################################################
#define a function that will process google's server responses for us.
getGeoDetails <- function(address){ 
  print(address)
  #use the gecode function to query google servers
  geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
  #now extract the bits that we need from the returned list
  answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
  answer$status <- geo_reply$status
  
  #HANDLES GOING OVER LIMIT if we are over the query limit - want to pause for an hour
  while(geo_reply$status == "OVER_QUERY_LIMIT"){
    print("OVER QUERY LIMIT - Pausing for 1 hour at:") 
    time <- Sys.time()
    print(as.character(time))
    Sys.sleep(60*60) #Creates an hour long time delay
    geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
    answer$status <- geo_reply$status
  }
  
  #HANDLES GETTING NAs return Na's if we didn't get a match:
  if (geo_reply$status != "OK"){
    return(answer)
  }   
  #HANDLES GETTING RESULTS BACK else, extract what we need from the Google server reply into a dataframe:
  answer$lat <- geo_reply$results[[1]]$geometry$location$lat
  answer$long <- geo_reply$results[[1]]$geometry$location$lng   
  if (length(geo_reply$results[[1]]$types) > 0){
    answer$accuracy <- geo_reply$results[[1]]$types[[1]]
  }
  answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
  answer$formatted_address <- geo_reply$results[[1]]$formatted_address
  
  return(answer)
}

##########################################################################################################################
#########################################################################################################################

#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
  print("Found temp file - resuming from index:")
  geocoded <- readRDS(tempfilename)
  startindex <- nrow(geocoded)
  print(startindex)
}


#######################################################################################################################
########################################################################################################################

# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex,length(addresses) )){
  print(paste("Working on index", ii, "of", length(addresses)))
  #query the google geocoder - this will pause here if we are over the limit.
  result = getGeoDetails(addresses[ii]) #Feeds the address to the geocoder function we defined earlier
  print(result$status) #Prints a status update for each call    
  result$index <- ii
  #append the answer to the results file (result)
  geocoded <- rbind(geocoded, result) 
  #save temporary results as we are going along
  saveRDS(geocoded, tempfilename)
}
########################################################################################################################
########################################################################################################################

#now we add the latitude and longitude to the main data file
data$lat <- geocoded$lat
data$long <- geocoded$long
data$accuracy <- geocoded$accuracy

#finally write it all to the output files
saveRDS(data, paste0('filepathCulture project\\', infile ,"_geocoded5.rds"))
write.table(data, file=paste0('filepath\\Culture project\\', infile ,"_geocoded5.csv"), sep=",", row.names=FALSE)
