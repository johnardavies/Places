library(rgdal)
library(sp)
library(stringr)
library('reshape2')
library(geojsonio)
library("classInt")
library(RColorBrewer)
library("maptools")

#This code merges different kinds of show by unitary authority with the shape file and then plots it

Unitary<-readOGR("filepath\Documents\\Unitary Authority","Counties_and_Unitary_Authorities_December_2016_Super_Generalised_Clipped_Boundaries_in_England_and_Wales")

#Unitary authorities of England are local authorities that are responsible for the provision of all local government services within a district. 


Unitary<-spTransform(Unitary, CRS("+proj=longlat +datum=WGS84"))

#Reads in the performance data

dailytrans2015<-read.csv("filepath\\Documents\\Unitary Authority\\January_to_December_2015_-_Daily_Transactions.csv", header=T)

#Reformats the way that the coordinates are coded so that it goes neatly into two separate columns
dailytrans2015$Geolocation<-as.character(dailytrans2015$Geolocation)

dailytrans2015$Geolocation<-gsub("\\(" ,"", dailytrans2015$Geolocation)
dailytrans2015$Geolocation<-gsub(")" ,"", dailytrans2015$Geolocation)
dailytrans2015$Geolocation<-gsub("" ,"", dailytrans2015$Geolocation)


dailytrans2015$lat<-as.numeric(str_split_fixed(dailytrans2015$Geolocation, ",", 2)[,1])
dailytrans2015$lon<-as.numeric(str_split_fixed(dailytrans2015$Geolocation, ",", 2)[,2])

#drop points that are na
dailytrans2015<-subset(dailytrans2015 ,is.na(dailytrans2015$lat)==FALSE|is.na(dailytrans2015$lon)==FALSE)

points = SpatialPoints(cbind(dailytrans2015$lon,dailytrans2015$lat ))


#sets up the projection for the points
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")


#Checks that the location is in the unitary authority
plot(Unitary)
plot(points, add=T)


#Aggregates by days returning results by artform and Unitary Authority
aggdatal <-aggregate(dailytrans2015[, c("Number.of.Tickets","Number.of.Performances")], by=list(dailytrans2015$Headline.Artform,dailytrans2015$Unitary.Authority), FUN=sum, na.rm=TRUE)

#Redoes the column names for aggdata
colnames(aggdatal)<-c("artform", "unitaryaut", "notickets", "noperform")

#Switches the shape of the format to wide form
visno<-dcast(aggdatal, unitaryaut ~ artform , value.var='notickets')

#Merges it in with the shape file 
Unitary@data<-cbind(Unitary@data, visno[match(Unitary@data[,c("ctyua16nm")],visno[ ,c("unitaryaut")]),])


#Writes it out as a json 
geojson_write(Unitary, file = "filepath\\Culture map\\cultureunit.geojson")


############################################################################################################
# The mapper function takes a category and maps it for the unitary authorities

arts<-c("Children/Family","Christmas Show", "Contemporary Visual Arts","Dance" , "Film", "General Entertainment" ,
   
"Literature","Museums/Heritage" , "Music" , "Musical Theatre",  "Other Artforms","Outdoor Arts", 

"Plays/Drama",  "Traditional Visual Arts" , "Uncoded", "Workshops") 

arts<-as.matrix(arts, nrow=16, ncol=1)

mapper<-function(xs){
  
  
  #Codes the NAs in the data as 0s
 Unitary@data[is.na(Unitary@data)]<<- 0
  
  #Selects the colour palate
  my_colours<-brewer.pal(6, "PuBu") 
  
  breaks<-classIntervals(Unitary@data[,c("Plays/Drama")], n=6, style="fixed", fixedBreaks=c(0,500,1000,1500,2000,50000,200000) , intervalClosure='left', unique=FALSE)
  #interval closure means that intervals are closed on the right
  # n is the number of categories in the scale
  #Where there is 1 entry per break the breaks2 coding is used, otherwise it reverts to a custom scale
  #style="fixed" uses the fixedBreaks vector
  
  #Plots the data
  plot(Unitary, col=my_colours[findInterval(Unitary@data[,c(xs)], breaks$brks, all.inside=FALSE)],axes=FALSE, border=FALSE)
  
  #Plots the chart legend
  plot<-legend("bottomleft", legend=leglabs(round(breaks$brks,digits=2), between=" to <"), fill=my_colours, bty="n", cex=0.7, title ="Number of groups")
  #bty= n means no box around legend border=FALSE means that there is no box
  
  #Adds a title that is the group category
  title(main=as.character(xs), cex.lab=0.07)
  
}


######Applies the mapping function to each of the categories contained in the arts vector

apply(arts,1, mapper)
#####################################################################################################################################
#####################################################################################################################################
#Does plots of the daily transactions data
#The variable names in this bit could be improved
dailytrans2015<-read.csv("filepath\\2015Dailydata.csv", header=T)

#Adds up the sales by day
datecount<-aggregate(dailytrans2015[, c("Number.of.Tickets","Number.of.Performances")], by=list(dailytrans2015$Date..UK.Format., dailytrans2015$Headline.Artform), FUN=sum, na.rm=TRUE)

#formats the date
datecount$day<- strptime(datecount$Group.1, "%d/%m/%Y")
datecount$month<- strftime(datecount$day, format="%m")
datecount$day<- strftime(datecount$day, format="%d")


library(ggplot2)

#Monthly totals of tickets sold
ggplot(data=datecount,aes(x=day,y=Number.of.Tickets) , fill=month            )+
  geom_bar(stat="identity",position="dodge")+ scale_fill_discrete(name='Closed',labels=c("False", "True"))+ xlab("Year") + ylab("Number of tickets sold")

#################Remove the less frequent kinds of shows#########################################
#Gets the annual counts
datecounts<-aggregate(dailytrans2015[, c("Number.of.Tickets")], by=list(dailytrans2015$Headline.Artform), FUN=sum, na.rm=TRUE)

#Drops those with less than 100000 people
mostcommon<-subset(as.character(datecounts$Group.1), datecounts$x>900000)

#Remove the less frequent categories
datecount<-subset(datecount,as.character(datecount$Group.2) %in% mostcommon & as.character(datecount$Group.2)!="Uncoded")
############################################################################################

#Split this by artform type
ggplot(data=datecount, aes(x=month, y=Number.of.Tickets, color=Group.2) )+ geom_line() + facet_wrap("Group.2")


