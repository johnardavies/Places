#Undertakes the location analysis using TTWA geographies, for a variety of different types of venue
#Calculates the location quotients across TTWAs and then maps the results for the different venue types
#The input is the spdf spatial points data frame created from the culture24 data

library('rgdal')
library("RColorBrewer")
library("classInt")
library("maptools")

#######################################################################################################################################
#1. Reads in the TTWA data

ttwa<-readOGR("filepath\TTWA 2001", "TTWA_2001_UK_BFE")

#sets the projection
ttwa<-spTransform(ttwa, CRS("+proj=longlat +datum=WGS84"))

#Recodes the Northern Irish names to avoid confusion
#The Northern Ireland TTWA codes
NI<-c("007","017","055","057","064","075","081","149", "159","168","209")


#Recodes the Northern Ireland codes for TTWA01CD
ttwa@data$TTWA01CD<-ifelse(ttwa@data$TTWA01CDO  %in% NI,as.character(ttwa@data$TTWA01CDO), as.character(ttwa@data$TTWA01CD))

#Changes the class of the ttwa coding so that the APS data that we import later matches
#Otherwise the ttwa data is coded as character e.g. 012 and not numeric 12
ttwa@data$TTWA01CDO<-as.numeric(ttwa@data$TTWA01CDO)
  
#Selects only points that fall within the UK
inuk<-over(spdf,ttwa, returnlist=TRUE)
  
#Creates a variable that says whether the area is in the UK, if it is returns the NUTSID
spdf@data$TTWA01CDO<-ifelse(is.na(inuk$TTWA01CDO)==TRUE ,'NOTUK', as.character(inuk$TTWA01CDO))
  
#subsets the data so that we only have the venues located in the UK
spdf<-subset(spdf, spdf@data$TTWA01CDO!='NOTUK')

#Calculates the number of venues by Travel to workarea

nutss<-table(spdf@data$TTWA01CDO)

nutts<-as.data.frame(nutss)

nutts$per<-nutts$Freq/sum(nutts$Freq) #Calculates the percentage share of venues of each TTWA area

##############################################################################################
#2. Insert the flags for different venue types

mugalibs<-"\\<museum\\>|\\<gallery\\>|\\<library\\>"
libs<-"\\<library\\>"
gal<-"\\<gallery\\>"
mu<-"\\<museum\\>"

#sets the types information to lower case
spdf@data$types<-tolower(spdf@data$types)

#Museums
spdf@data$mu<-ifelse(grepl(mu, spdf@data$types),1,0)

#Libraries
spdf@data$lib<-ifelse(grepl(libs,spdf@data$types),1,0)

#Galleries
spdf@data$gal<-ifelse(grepl(gal,spdf@data$types),1,0)

#Allthree
spdf@data$mugalib<-ifelse(grepl(mugalibs,spdf@data$types),1,0)

############################################################################################
#3. Calculates the location quotients

#Calcuates lqs for multiple different kinds of groups

#These are flags that we have for each groups in spdf@data
cats<-c("mugalib", "mu", "lib", "gal") #mu museums, lib libraries, gal galleries, mugalib is all three

#########################################################################################################
# Creates the base table that has how many the number of different kinds of venue by NUTS3. 
#Var1 is the NUTS3ID and Freq is the the number of venues in the lic

#How many venues by TTWA
g<-as.data.frame(table(spdf@data$TTWA01CDO))

#Converts the coding of the TTWA data to ensure a match
g$Var1<-as.numeric(g$Var1)

#How many venues by the different kinds of venues
ggdata <-aggregate(spdf@data[,c("mugalib", "mu", "lib", "gal")], by=list(spdf@data$TTWA01CDO),FUN=sum)

#Converts the coding of the TTWA data to ensure a match
ggdata$Group.1<-as.numeric(ggdata$Group.1)

#merges the two
tabs<-merge(g,ggdata, by.x='Var1', by.y='Group.1', all.x=TRUE)

# Population data calculation
#Readsin the population data
#aps14<-read.csv('D:\\APSP_JD14_Nestav2.csv', header=T) #This used if reading direct APS

#Calculates population by NUTS3 coding
#nationalsplitUK14<-xtabs(PWTA14 ~ TTWA08, data=lfs2014)
nationalsplitUK14<-read.csv('filepath\Culture project\\ttwons.csv', header=T)

#Converts the table to a data frame
nationalsplitUK14<-as.data.frame(nationalsplitUK14)

#Merges with the population data, so we have the information to calculate the ratios from
tabs<-merge(tabs,nationalsplitUK14, by.x="Var1" , by.y="TTWA")
#################################################################################################

lq<-function(x){(x/sum(x,na.rm=TRUE))/(tabs$emp/sum(tabs$emp,na.rm=TRUE))}
#Applies the lq function to the data, misses the first column as it has the NUTSids
outlq<-cbind(as.character(tabs$Var1),apply(tabs[,c("Freq", "mugalib", "mu", "lib" ,"gal", "emp")],2, lq))
#outlq<-cbind(as.character(tabs$Var1),apply(tabs[,c("Freq.x", "mugalib", "mu", "lib" ,"gal", "Freq.y")],2, lq))

#Recodes the first column name which is otherwise blank
colnames(outlq)[1]<-c("Var1")

outlq[,c("Var1")]<-as.numeric(outlq[,c("Var1")])


###################################################################################################################################
# 4.This code maps the data for each of the Travel to Work Areas
# and for each of the categories plots the location quotient

library(rgdal)
library(RColorBrewer)
library(classInt)
library(maptools)


mapper<-function(vlab){
  
  print(vlab)
  # class(xs)
  
  #Creates \a new variable labelled by the category name, with the variable values equal to the location quotient of the corresponding area
  #The data is labelled as categories, so we convert to character and then numeric to sort out the formatting
  ttwa@data[,c(vlab)]<<-as.numeric(as.character(outlq[match(as.numeric(ttwa@data[,c("TTWA01CDO")]),outlq[ ,c("Var1")]),c(vlab)]))
  
  #Codes the NAs in the data as 0s
  ttwa@data[is.na(ttwa@data)]<<- 0
  
  
  #Selects the colour palate
  my_colours<-brewer.pal(6, "PuBu") 
  
  breaks<-classIntervals(ttwa@data[,c("Freq")], n=6, style="fixed", fixedBreaks=c(0,0.5,1,1.5,2,50) , intervalClosure='left', unique=FALSE)
  #interval closure means that intervals are closed on the right
  # n is the number of categories in the scale
  #Where there is 1 entry per break the breaks2 coding is used, otherwise it reverts to a custom scale
  #style="fixed" uses the fixedBreaks vector
  
  #Plots the data
  plot(ttwa, col=my_colours[findInterval(as.numeric(ttwa@data[,c(vlab)]), breaks$brks, all.inside=FALSE)],axes=FALSE, border=FALSE)
  
  #Plots the chart legend
  plot<-legend("right", legend=leglabs(round(breaks$brks,digits=2), between=" to <"), fill=my_colours, bty="n", cex=0.7, title ="locationquotient relative to employment")
  #bty= n means no box around legend border=FALSE means that there is no box
  
  #Adds a title that is the group category
  title(main=as.character(vlab), cex.lab=0.07)
  
}

######Applies the mapping function to each of the categories in the data

la<-c("Freq.x","mugalib", "mu","lib","gal")

lapply(colnames(outlq)[2:6], mapper)

