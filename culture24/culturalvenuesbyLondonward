#This code reads in London wards data and London culture 24 data
#It then calculates the number of cultural venues by type by London ward
#It plots a map for each category showing the number of groups by ward

#1.Reads in London wards data#################################################################################################

#Reads in the London wards data \London-wards-2014_ESRI","London_Ward_CityMerged"
Lwards<-readOGR("filepathLondon-wards-2014 (1)\\London-wards-2014_ESRI","London_Ward_CityMerged")

#sets up the lWards projection so that it is the same as everything else
Lwards<-spTransform(Lwards, CRS("+proj=longlat +datum=WGS84"))


##############################################################################################################################
#2. Reads in Culture 24 data

#Reads in the 

#filepath to the database
dbfile<-"filpathulture25.db"

# Instantiate the dbDriver to a convenient object
sqlite = dbDriver("SQLite");

# Assign the connection string to a connection object
mydb = dbConnect(sqlite, dbfile);

#Lists the tables associated with the database
dbListTables(mydb)

#Reads in the table as a data frame, calls it p1

p1 = dbGetQuery(mydb,'select * from culture24venues170616')

#2. Creates a spatial points vector from the culture24 data
#Creates the long lat vector

#Subsets the data so that only geocoded clubs are included
p1<-subset(p1, is.na(p1$lat)==FALSE & is.na(p1$lon)==FALSE)
d<-cbind(p1$lon, p1$lat)


points = SpatialPoints(d)

##sets up the projection for the photos as the same
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")


# 3. Binds the data to the points to create a spatial points data frame
spdf = SpatialPointsDataFrame(points, p1)

mugalibs<-"\\<museum\\>|\\<gallery\\>|\\<library\\>"
libs<-"\\<library\\>"
gal<-"\\<gallery\\>"
mu<-"\\<museum\\>"

#sets the types information to lower case
spdf@data$types<-tolower(spdf@data$types)

#Museums
spdf@data$mu<-ifelse(grepl(mu, spdf@data$types),1,0)

#Libraries
spdf@data$lib<-ifelse(grepl(libs,spdf@data$types),1,0)

#Galleries
spdf@data$gal<-ifelse(grepl(gal,spdf@data$types),1,0)

#Allthree
spdf@data$mugalib<-ifelse(grepl(mugalibs,spdf@data$types),1,0)


#4. Takes the intesection of the Cuture24 data and the London wards data###########################

#selects the wards that the photographs fall within
ward<-over(points,Lwards, returnlist=TRUE)

#binds to the spatial points data frame
spdf@data<-cbind(spdf@data, ward)  #The new ward level variable is spdf@data$Nf

#Selects only London clubs
spdf<-subset(spdf, is.na(spdf@data$NAME)==FALSE)


spdf@data$flag<-1

#aggregates the data by ward level and by the different categories at ward level

aggdata1<-aggregate(spdf@data[,c( "mu", "lib", "gal")],by=list(spdf@data$NAME),FUN=sum, na.rm=TRUE)


#############################################################################################################
#5. Lists the different categories and sets them as a vector

sel<-c("mu", "lib", "gal" )


############################################################################################################
#6. The mapper function takes a category and maps it over the London wards data
  
mapper<-function(xs){

#selects the data that corresponds to a particular category

#Creates \a new variable labelled by the category name, with the variable values equal to the number ofgroups by ward
Lwards@data[,c(xs)]<<-aggdata1[match(Lwards@data[,c("NAME")],aggdata1[ ,c("Group.1")]),c(xs)] 

#Codes the NAs in the data as 0s
Lwards@data[is.na(Lwards@data)]<<- 0

#Selects the colour palate
my_colours<-brewer.pal(6, "PuBu") 

breaks<-classIntervals(Lwards@data[,c(xs)], n=6, style="fixed", fixedBreaks=c(0,1,5,10,15,20,25,30) , intervalClosure='left', unique=FALSE)
#interval closure means that intervals are closed on the right
# n is the number of categories in the scale
#Where there is 1 entry per break the breaks2 coding is used, otherwise it reverts to a custom scale
#style="fixed" uses the fixedBreaks vector

#Plots the data
plot(Lwards, col=my_colours[findInterval(Lwards@data[,c(xs)], breaks$brks, all.inside=FALSE)],axes=FALSE, border=FALSE)

#Plots the chart legend
plot<-legend("bottomleft", legend=leglabs(round(breaks$brks,digits=2), between=" to <"), fill=my_colours, bty="n", cex=0.7, title ="Number of groups")
#bty= n means no box around legend border=FALSE means that there is no box

#Adds a title that is the group category
title(main=as.character(xs), cex.lab=0.07)

}



lapply(sel,mapper)

